"use strict";(self.webpackChunkmemory_docs=self.webpackChunkmemory_docs||[]).push([[2443],{1758:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>n,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"architecture","title":"Entities","description":"Card (UI)","source":"@site/docs/architecture.md","sourceDirName":".","slug":"/architecture","permalink":"/memory-docs/architecture","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","next":{"title":"Game Flow Diagram","permalink":"/memory-docs/diagrams/game-flow"}}');var c=s(3420),t=s(8356);const n={},a="Entities",d={},l=[{value:"Card (UI)",id:"card-ui",level:3},{value:"Board (State + Layout)",id:"board-state--layout",level:3},{value:"Game (State)",id:"game-state",level:3},{value:"GameHandlerService (Orchestrator)",id:"gamehandlerservice-orchestrator",level:3}];function o(e){const r={code:"code",h1:"h1",h3:"h3",header:"header",li:"li",ul:"ul",...(0,t.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(r.header,{children:(0,c.jsx)(r.h1,{id:"entities",children:"Entities"})}),"\n",(0,c.jsx)(r.h3,{id:"card-ui",children:"Card (UI)"}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsx)(r.li,{children:"Stateless component"}),"\n",(0,c.jsxs)(r.li,{children:["Props: ",(0,c.jsx)(r.code,{children:"flipped"}),", ",(0,c.jsx)(r.code,{children:"matched"}),", ",(0,c.jsx)(r.code,{children:"disabled"}),", ",(0,c.jsx)(r.code,{children:"symbol"})]}),"\n",(0,c.jsx)(r.li,{children:"Delegates user interaction to Board"}),"\n"]}),"\n",(0,c.jsx)(r.h3,{id:"board-state--layout",children:"Board (State + Layout)"}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsx)(r.li,{children:"Holds card grid state"}),"\n",(0,c.jsx)(r.li,{children:"Limits flipping to max 2 cards"}),"\n",(0,c.jsx)(r.li,{children:"Tracks flipped cards"}),"\n",(0,c.jsxs)(r.li,{children:["Dispatches ",(0,c.jsx)(r.code,{children:"flipCard"})," action"]}),"\n",(0,c.jsx)(r.li,{children:"Listens to card state via selectors"}),"\n"]}),"\n",(0,c.jsx)(r.h3,{id:"game-state",children:"Game (State)"}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsx)(r.li,{children:"Tracks move count, timer, score, and win condition"}),"\n",(0,c.jsxs)(r.li,{children:["Responds to events such as ",(0,c.jsx)(r.code,{children:"cardsMatched"}),", ",(0,c.jsx)(r.code,{children:"resetGame"}),", etc."]}),"\n",(0,c.jsx)(r.li,{children:"Manages overall game lifecycle"}),"\n"]}),"\n",(0,c.jsx)(r.h3,{id:"gamehandlerservice-orchestrator",children:"GameHandlerService (Orchestrator)"}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsx)(r.li,{children:"Subscribes to relevant selectors (e.g., flipped cards)"}),"\n",(0,c.jsx)(r.li,{children:"Implements rule logic (e.g., checking for a match)"}),"\n",(0,c.jsxs)(r.li,{children:["Dispatches outcome actions like ",(0,c.jsx)(r.code,{children:"cardsMatched"}),", ",(0,c.jsx)(r.code,{children:"cardsNotMatched"}),", ",(0,c.jsx)(r.code,{children:"gameWon"})]}),"\n",(0,c.jsx)(r.li,{children:"Debounces time-based effects (e.g., delay before flipping back)"}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,c.jsx)(r,{...e,children:(0,c.jsx)(o,{...e})}):o(e)}}}]);